// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Domain.Entities.AirAnalysisContext.AirTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CalcDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("No2IndexLevel")
                        .HasColumnType("int");

                    b.Property<string>("No2IndexName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("O3IndexLevel")
                        .HasColumnType("int");

                    b.Property<string>("O3IndexName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pm10IndexLevel")
                        .HasColumnType("int");

                    b.Property<string>("Pm10IndexName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pm25IndexLevel")
                        .HasColumnType("int");

                    b.Property<string>("Pm25IndexName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("So2IndexLevel")
                        .HasColumnType("int");

                    b.Property<string>("So2IndexName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AirTests");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.City", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CommuneId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.Commune", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CommuneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Communes");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.Station", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("GegrLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GegrLon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.City", b =>
                {
                    b.HasOne("Domain.Entities.ProvinceContext.Commune", "Commune")
                        .WithMany("Cities")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.Commune", b =>
                {
                    b.HasOne("Domain.Entities.ProvinceContext.Province", "Province")
                        .WithMany("Communes")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.Station", b =>
                {
                    b.HasOne("Domain.Entities.ProvinceContext.City", "City")
                        .WithMany("Stations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.City", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.Commune", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.ProvinceContext.Province", b =>
                {
                    b.Navigation("Communes");
                });
#pragma warning restore 612, 618
        }
    }
}
